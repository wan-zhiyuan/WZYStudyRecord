1、先写顶部的AppBar,它由title和bottom两部分组成；
2、bottom中放入一个切换组件 TabBar ,组件包含两部分：controller和tabs 
3、controller创建时有两个参数，一个是length，切换的数量，另一个是vsync,垂直属性，这个记住就行需要放this,而且此组件需要with SingleTickerProviderStateMixin
4、最后在body中放入TabBarView组件，切换按钮同时切换页面；
注意：保持状态的组件如何写？首先需要with AutomaticKeepAliveClientMixin
其次，重写wantKeppAlive 的值为true。



代码：
main.dart
import 'package:flutter/material.dart';
import 'keep_alive_demo.dart';

void main()=>runApp(MyApp());

class MyApp extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo05',
      theme: ThemeData(
        primarySwatch: Colors.lightBlue,
      ),
      home: KeepAliveDemo(),
    );
  }
}

class KeepAliveDemo extends StatefulWidget {

  _KeepAliveDemoState createState() => _KeepAliveDemoState();
}

// with是dart的关键字，意思是混入的意思
class _KeepAliveDemoState extends State<KeepAliveDemo> with SingleTickerProviderStateMixin {
  TabController _controller;

  // 初始化方法
  @override
  void initState() { 
    super.initState();
    _controller =TabController(length: 3,vsync: this);
  }

  // 销毁方法
  @override
  void dispose() { 
    _controller.dispose();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
       appBar: AppBar(
         title: Text('Keep Alive Demo'),
         bottom: TabBar(
           controller: _controller,
           tabs: <Widget>[
             Tab(icon: Icon(Icons.directions_car)),
             Tab(icon: Icon(Icons.directions_transit)),
             Tab(icon: Icon(Icons.directions_bike)),
           ],
         ),
        ),
        body: TabBarView(
          controller: _controller,
          children: <Widget>[
            MyHomePage(),
            MyHomePage(),
            MyHomePage(),
          ],
        ),
    );
  }
}

keep_alive_demo.dart
import 'package:flutter/material.dart';

class MyHomePage extends StatefulWidget {

  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> with AutomaticKeepAliveClientMixin {
  // 申明计数器
  int _counter = 0;

  @override
  bool get wantKeepAlive => true;

  void _incrementCounter(){
    setState(() {_counter++; });
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
       body: Center(
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: <Widget>[
             Text('点一次增加一个数字'),
             Text(
               '$_counter',
               style: Theme.of(context).textTheme.display1,
             )
           ],
         ),
       ),
       floatingActionButton: FloatingActionButton(
          onPressed: _incrementCounter,
          tooltip: 'Increment',
          child: Icon(Icons.add),
       ),
    );
  }
}